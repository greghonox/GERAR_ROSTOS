{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python39264bitproducaovenva400e8dee59f455383c73b965a26673a",
   "display_name": "Python 3.9.2 64-bit ('producao': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "source": [
    "# GERANDO IMAGENS DE ROSTO ALEATORIO, UTILIZANDO API DO SITE: https://thispersondoesnotexist.com/image"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from requests import get\n",
    "from os.path import isfile\n",
    "\n",
    "pasta_destino = '/tmp/img{cont}.jpg'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "GERANDO IMAGEM: /tmp/img15.jpg\n",
      "GERANDO IMAGEM: /tmp/img16.jpg\n",
      "GERANDO IMAGEM: /tmp/img17.jpg\n",
      "GERANDO IMAGEM: /tmp/img18.jpg\n",
      "GERANDO IMAGEM: /tmp/img19.jpg\n",
      "GERANDO IMAGEM: /tmp/img20.jpg\n",
      "GERANDO IMAGEM: /tmp/img21.jpg\n",
      "GERANDO IMAGEM: /tmp/img22.jpg\n",
      "GERANDO IMAGEM: /tmp/img23.jpg\n",
      "GERANDO IMAGEM: /tmp/img24.jpg\n"
     ]
    }
   ],
   "source": [
    "def verificar_gerar_nome() -> str:\n",
    "    cont = 1\n",
    "    while True:\n",
    "        if not isfile(pasta_destino.format(cont=cont)): return pasta_destino.format(cont=cont)\n",
    "        cont += 1\n",
    "        \n",
    "def gerar_img():\n",
    "    with open(verificar_gerar_nome(), 'wb') as f: \n",
    "        try:\n",
    "            print(f\"GERANDO IMAGEM: {verificar_gerar_nome()}\")\n",
    "            f.write(get('https://thispersondoesnotexist.com/image').content)\n",
    "        except Exception as e: print(f'NAO CONSEGUI BAIXAR A IMAGEM {e}')\n",
    "\n",
    "for _ in range(10): gerar_img()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}